.TH CHOICESCRIPT 1 "" "ChoiceScript Usage"
.SH General Usage
.PP
To create a new game simply run:
.IP
.nf
\f[C]
$\ choicescript\ new\ MyAwesomeGame\ intro_scene,ending
\f[]
.fi
.PP
This will create the following project in your current directory (you
can omit \f[C]intro_scene,ending\f[], some sample vignettes will be
generated for you):
.IP
.nf
\f[C]
MyAwesomeGame/
\ \ |-\ game.js
\ \ `-\ scenes/
\ \ \ \ \ \ |-\ intro_scene.txt
\ \ \ \ \ \ |-\ ending.txt
\ \ \ \ \ \ `-\ choicescript_stats.txt
\f[]
.fi
.PP
You can open up your folder and write your game.
To run it in a browser use:
.IP
.nf
\f[C]
$\ choicescript\ server
\f[]
.fi
.PP
in the project directory.
This will (by default) start your game at http://localhost:3030/.
.PP
To test that your game works you can use two types of automated testing:
.IP
.nf
\f[C]
$\ choicescript\ quicktest
$\ choicescript\ randomtest
\f[]
.fi
.PP
This runs them both:
.IP
.nf
\f[C]
$\ choicescript\ test\ 
\f[]
.fi
.PP
Finally remember that you can get help on all the various command and
options by typing:
.IP
.nf
\f[C]
$\ choicescript\ --help
\f[]
.fi
.PP
or for any command:
.IP
.nf
\f[C]
$\ choicescript\ COMMAND\ --help
\f[]
.fi
.SS The new command
.IP
.nf
\f[C]
$\ choicescript\ new\ NAME
\f[]
.fi
.PP
Generates a new project.
NAME will be the name of the project, although that is currently only
used as the name of the directory that will be written.
.PP
Additionally one may specify a list of scenes that will be generated in
a comma-separated list (without spaces).
Each of these will generate a file of that name in the scenes
subdirectory and add that scene to the \f[C]SceneNavigator\f[] in
game.js.
.SS Options
.PP
\f[C]--no-stats\f[] will skip generating the magical
\f[C]scenes/choicescript_stats.txt\f[] that represents the stats screne.
.PP
\f[C]--stats-list\ <args>\f[] is a rather complex option that allows you
to customize what stats will be used in the project.
The simplest way is simply to run it with a list of names:
.IP
.nf
\f[C]
$\ choicescript\ new\ my_game\ --stats-list\ "Wisdom,\ Strength"
>\ Your\ game\ has\ been\ generated.\ You\ can\ now\ run\ it\ with\ `choicescript\ server`.
$\ cat\ my_game/game.js
\&...
>\ stats\ =\ {
>\ \ \ \ wisdom:\ 50
>\ \ \ \ ,strength:\ 50
>\ };
\&...
$\ cat\ my_game
>\ This\ is\ a\ stats\ screen!
>\ 
>\ *stat_chart
>\ 
>\ \ \ percent\ Wisdom
>\ \ \ percent\ Strength
\f[]
.fi
.PP
As you can see this will allow you to start writing your game
immediately.
Stats default to percentages with a value of 50%, however you can
customize this with this more complex example:
.IP
.nf
\f[C]
$\ choicescript\ new\ my_game\ --stats-list\ "Pet\ Name:text,\ Willpower,\ Magic:opposed_pair(Strength)"\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
>\ Your\ game\ has\ been\ generated.\ You\ can\ now\ run\ it\ with\ `choicescript\ server`.
$\ cat\ my_game/game.js\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\&...
>\ stats\ =\ {
>\ \ \ \ \ pet_name:\ 50
>\ \ \ \ \ ,willpower:\ 50
>\ \ \ \ \ ,magic:\ 50
>\ };
\&...\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
$\ cat\ my_game/scenes/choicescript_stats.txt\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
>\ This\ is\ a\ stats\ screen!
>\ 
>\ *stat_chart
>\ 
>\ \ \ text\ pet_name\ Pet\ Name
>\ \ \ percent\ Willpower
>\ \ \ opposed_pair\ Magic
>\ \ \ \ \ Strength
\f[]
.fi
.PP
This way we can generate other types.
Also the command will automatically transform invalid variable names
into variable ones.
.SH Server Command
.PP
To actually play through your game you will need to run the ChoiceScript
server.
Simply run:
.IP
.nf
\f[C]
$\ choicescript\ server
>\ Your\ game\ is\ running\ on\ http://localhost:3030/
\f[]
.fi
.PP
Now you can open http://localhost:3030/ in your browser and play through
your game.
.PP
You can customize the port this command runs on with the \f[C]--port\f[]
option (you may want to do this when hosting the game on a server or if
the game is clashing with something -- perhaps you would like to have
two games running at the same time).
.PP
If you pass \f[C]--open\f[] on OSX the game should automatically open in
your default browser.
.SH Testing
.PP
The \f[C]test\f[] command will run both tests that are provided with
default options.
.PP
You can also run each command separately with:
.IP
.nf
\f[C]
$\ choicescript\ quicktest
$\ choicescript\ randomtest
\f[]
.fi
.PP
It is quite recommended to run tests with the \f[C]-q\f[] option to see
only relevant output.
.PP
An interesting argument to \f[C]quicktest\f[] is \f[C]--watch\f[]: this
will monitor your game\[aq]s directory for changes and run the test
anytime you save a file.
.PP
See CHOICESCRIPT-TESTING(1) for more details.
